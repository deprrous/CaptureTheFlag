# S-Box for SubBytes
sbox = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
)

# Inverse S-Box for Inverse SubBytes
inv_sbox = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0xC2, 0x9F, 0xBA, 0xE0, 0x4B,
    0xC5, 0xC3, 0x26, 0xE8, 0x9C, 0x46, 0x81, 0x3C, 0x7D, 0x92, 0xD8, 0x5B, 0x5E, 0x3D, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x8C, 0x2F, 0x60, 0x5E, 0x9B, 0xD5, 0xA6, 0xED, 0x1E,
    0x2E, 0x12, 0x2B, 0xB2, 0xEA, 0x92, 0x49, 0x51, 0x60, 0x74, 0xE0, 0xF4, 0x67, 0x5C, 0x7A, 0x1F,
    0x1C, 0xE7, 0x6A, 0x3B, 0x90, 0x83, 0xE2, 0xB2, 0x39, 0x4D, 0x6B, 0x50, 0xE2, 0x6A, 0x38, 0xFF,
    0xF0, 0x14, 0xB5, 0x84, 0xD9, 0xB7, 0xB4, 0xFB, 0x89, 0x51, 0x38, 0x0E, 0xE5, 0x0A, 0x55, 0x66,
    0xE2, 0xB5, 0xB7, 0xFC, 0xA5, 0xE1, 0x62, 0x65, 0x46, 0x30, 0x85, 0xE1, 0x03, 0xCC, 0x63, 0x9D,
    0x2D, 0xE5, 0x9B, 0x92, 0x36, 0x66, 0x83, 0xE7, 0x71, 0x93, 0x9D, 0x73, 0xA5, 0xE2, 0xE3, 0x5B,
    0xB0, 0xB4, 0x58, 0x3A, 0xC1, 0x04, 0x98, 0xB2, 0x3B, 0x9B, 0x50, 0xAD, 0xE6, 0x5C, 0xA6, 0xC2,
    0xFF, 0xD8, 0xC6, 0x3D, 0xF8, 0x9D, 0x47, 0xDD, 0xAB, 0xF8, 0x43, 0xA2, 0x30, 0x7B, 0xF0, 0x39,
    0x1F, 0x3C, 0xF1, 0x73, 0x90, 0xBC, 0x88, 0x66, 0x3E, 0x7E, 0x84, 0xB5, 0x6F, 0x14, 0x8A, 0x5E,
    0x6D, 0x5D, 0x4D, 0x4F, 0x80, 0x63, 0x86, 0x96, 0xB8, 0xD9, 0xBF, 0x70, 0x08, 0x2A, 0xE7, 0x04,
    0x4C, 0x7B, 0x9D, 0x31, 0xD3, 0x48, 0xAB, 0x94, 0x9B, 0x62, 0x74, 0xE0, 0x84, 0x7D, 0xF8, 0xFA,
    0x1B, 0x6A, 0xA4, 0xF3, 0x80, 0x66, 0xD7, 0x3E, 0x44, 0x1D, 0xDA, 0xB4, 0x8D, 0x96, 0x84, 0xA2,
    0xBC, 0xA5, 0x3C, 0xB1, 0x38, 0x54, 0xF2, 0xD1, 0x8E, 0xA7, 0xED, 0xC2, 0x7D, 0xBB, 0x3C, 0x3C,
    0xD4, 0xAC, 0xAD, 0x1C, 0xBC, 0x6F, 0x56, 0x2F, 0x84, 0x69, 0x3E, 0x3B, 0x0C, 0xDF, 0x87, 0xD6,
    0xB5, 0xC7, 0x4B, 0x3E, 0x5D, 0xF3, 0x31, 0x6A, 0x63, 0x73, 0x9E, 0x94, 0xA0, 0xB8, 0xA5, 0x52
)

# Galois Field multiplication
def xtime(x):
    """Multiplies by x in GF(2^8) by reducing modulo x^8 + x^4 + x^3 + x + 1."""
    return ((x << 1) ^ (0x1B if x & 0x80 else 0)) & 0xFF

# Mix Columns
def mix_columns(state):
    for i in range(4):
        a = state[i * 4:i * 4 + 4]
        state[i * 4] = xtime(a[0]) ^ xtime(a[1]) ^ a[2] ^ a[3]
        state[i * 4 + 1] = a[0] ^ xtime(a[1]) ^ xtime(a[2]) ^ a[3]
        state[i * 4 + 2] = a[0] ^ a[1] ^ xtime(a[2]) ^ xtime(a[3])
        state[i * 4 + 3] = xtime(a[0]) ^ a[1] ^ a[2] ^ xtime(a[3])

# Inverse Mix Columns
def inv_mix_columns(state):
    for i in range(4):
        a = state[i * 4:i * 4 + 4]
        state[i * 4] = xtime(xtime(a[0])) ^ xtime(xtime(a[1] ^ a[0])) ^ a[2] ^ xtime(a[3])
        state[i * 4 + 1] = xtime(a[0]) ^ xtime(xtime(a[1])) ^ xtime(a[2] ^ a[1]) ^ a[3]
        state[i * 4 + 2] = xtime(a[0]) ^ a[1] ^ xtime(xtime(a[2])) ^ xtime(a[3] ^ a[2])
        state[i * 4 + 3] = xtime(xtime(a[0] ^ a[3])) ^ xtime(a[1]) ^ a[2] ^ xtime(xtime(a[3]))

# SubBytes
def sub_bytes(state):
    for i in range(16):
        state[i] = sbox[state[i]]

# Inverse SubBytes
def inv_sub_bytes(state):
    for i in range(16):
        state[i] = inv_sbox[state[i]]

# Shift Rows
def shift_rows(state):
    state[1], state[5], state[9], state[13] = state[5], state[9], state[13], state[1]
    state[2], state[10], state[6], state[14] = state[10], state[6], state[14], state[2]
    state[3], state[15], state[11], state[7] = state[15], state[11], state[7], state[3]

# Inverse Shift Rows
def inv_shift_rows(state):
    state[1], state[5], state[9], state[13] = state[13], state[1], state[5], state[9]
    state[2], state[10], state[6], state[14] = state[6], state[14], state[2], state[10]
    state[3], state[15], state[11], state[7] = state[7], state[3], state[15], state[11]

# Add Round Key
def add_round_key(state, round_key):
    for i in range(16):
        state[i] ^= round_key[i]

# Key expansion (simple example)
def key_expansion(key):
    # Assuming 16-byte key for simplicity
    return [key[i] for i in range(16)]

# Encrypt a block
def encrypt_block(block, round_key):
    state = list(block)
    add_round_key(state, round_key)

    for _ in range(10):  # Number of rounds
        sub_bytes(state)
        shift_rows(state)
        mix_columns(state)
        add_round_key(state, round_key)

    return bytes(state)

# Decrypt a block
def decrypt_block(block, round_key):
    state = list(block)
    add_round_key(state, round_key)

    for _ in range(10):  # Number of rounds
        inv_shift_rows(state)
        inv_sub_bytes(state)
        inv_mix_columns(state)
        add_round_key(state, round_key)

    return bytes(state)

# Padding
def pad(data):
    padding_len = 16 - len(data) % 16
    return data + bytes([padding_len] * padding_len)

def unpad(data):
    padding_len = data[-1]
    return data[:-padding_len] if padding_len <= 16 else data
    
# File encryption
def encrypt_file(input_file, output_file, round_key):
    with open(input_file, 'rb') as f:
        data = f.read()

    data = pad(data)
    encrypted = bytearray()
    for i in range(0, len(data), 16):
        block = data[i:i + 16]
        encrypted_block = encrypt_block(block, round_key)
        encrypted.extend(encrypted_block)

    with open(output_file, 'wb') as f:
        f.write(encrypted)

# File decryption
def decrypt_file(input_file, output_file, round_key):
    with open(input_file, 'rb') as f:
        data = f.read()

    decrypted = bytearray()
    for i in range(0, len(data), 16):
        block = data[i:i + 16]
        decrypted_block = decrypt_block(block, round_key)
        decrypted.extend(decrypted_block)

    decrypted = unpad(decrypted)

    with open(output_file, 'wb') as f:
        f.write(decrypted)


original_key = bytes([
0x00, 0x01, 0x02, 0x03, 
0x04, 0x05, 0x06, 0x07, 
0x08, 0x09, 0x0A, 0x0B, 
0x0C, 0x0D, 0x0E, 0x0F
])
round_key = key_expansion(original_key)

encrypt_file(r"/home/dep/crypto/lab7_8/data.txt", r"/home/dep/crypto/lab7_8/enc.enc", round_key)
print("Encryption complete.")

# decrypt_file(r"/home/dep/crypto/lab7_8/enc.enc", r"/home/dep/crypto/lab7_8/dec.txt", round_key)
# print("Decryption complete.")
