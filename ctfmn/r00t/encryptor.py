from Crypto.Util.number import *

e = 3
n = 14290868523866273964722480454351241742496754560770411287866364240545205465133043325415097954674683445124120335324232719175923240978375779243530160535829229086178248903329440614230610675335345826064222981484305680023762910468521758179930790834951288492018718972846049121232342421997987815082305525449350731633294447659179739916405181625437672017875404652046383617587566958516752387774586574593084952465343052712990377755070360561259844708365671296432329279932361229056549917569252501482023241743630155509891447991885551464388695508027519359609043392142324602693820342499324351788190775673176643254478610434807865494597

def read_flag():
    with open('flag.txt', 'rb') as f:
        return f.read().strip()
    f.close()

def generate_primes():
    return getPrime(1024), getPrime(1024)

def encrypt():
    p, q = generate_primes()
    n = (p * q)

    flag = read_flag() + b"\x00" * 200
    return pow(bytes_to_long(flag),e,n), n

if __name__ == '__main__':
    encrypted_flag, n = encrypt()
    print('Encrypted flag: {}\nN: {}\n'.format(encrypted_flag, n))
pow(m,e,n)