from Crypto.Util.number import inverse, long_to_bytes

# Given values
n = 4013610727845242593703438523892210066915884608065890652809524328518978287424865087812690502446831525755541263621651398962044653615723751218715649008058509
p = 51894141255108267693828471848483688186015845988173648228318286999011443419469
q = 77342270837753916396402614215980760127245056504361515489809293852222206596161
e = 0x10001
c = int("249d72cd1d287b1a15a3881f2bff5788bc4bf62c789f2df44d88aae805b54c9a94b8944c0ba798f70062b66160fee312b98879f1dd5d17b33095feb3c5830d28", 16)

# Step 1: Compute phi(n)
phi_n = (p - 1) * (q - 1)

# Step 2: Compute private exponent d
d = inverse(e, phi_n)

# Step 3: Decrypt ciphertext
m = pow(c, d, n)

# Step 4: Convert decrypted integer to bytes
plaintext = long_to_bytes(m)

# Output
print("Decrypted message:", plaintext)
